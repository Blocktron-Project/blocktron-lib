{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/index.js"],"names":["Blocktron","chain","newTransactions","nonce","previousHash","hash","Error","newBlock","index","length","timeStamp","Date","now","transactions","push","module","exports"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;AClFA;;;;;;;;AAQA;;;;;AAKA;;;;;;;;;;;;;;AAcA;;AAEA;;;;;;;;;IAIMA,S;AACF;;;AAGA,uBAAc;AAAA;;AACV,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,eAAL,GAAuB,EAAvB;AACH;;AAED;;;;AAIA;;;;;;;;;;;mCAOeC,K,EAAOC,Y,EAAcC,I,EAAM;;AAEtC;;;AAGAF,cAAQA,QAAQA,KAAR,GAAiB,YAAY;AACjC,YAAIG,KAAJ,CAAU,gBAAV;AACH,OAFuB,EAAxB;AAGAF,qBAAeA,YAAf,GAA+B,YAAY;AACvC,YAAIE,KAAJ,CAAU,wBAAV;AACH,OAF6B,EAA9B;AAGAD,aAAOA,OAAOA,IAAP,GAAe,YAAY;AAC9B,YAAIC,KAAJ,CAAU,eAAV;AACH,OAFoB,EAArB;;AAIA;;;;;;;;;;;AAWA,UAAMC,WAAW;AACbC,eAAO,KAAKP,KAAL,CAAWQ,MAAX,GAAoB,CADd;AAEbC,mBAAWC,KAAKC,GAAL,EAFE;AAGbC,sBAAc,KAAKX,eAHN;AAIbC,eAAOA,KAJM;AAKbE,cAAMA,IALO;AAMbD,sBAAcA;AAND,OAAjB;;AASA;;;;AAIA,WAAKF,eAAL,GAAuB,EAAvB;;AAEA;;;AAGA,WAAKD,KAAL,CAAWa,IAAX,CAAgBP,QAAhB;;AAEA,aAAOA,QAAP;AACH;;;;;;AAGLQ,OAAOC,OAAP,GAAiBhB,SAAjB,C","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\r\n * blocktron-lib\r\n * This file contains the Blocktron Class which houses the core blockchain functions and methods\r\n * Written by: Sandeep Vattapparambil\r\n * Email: sandeepv68@gmail.com\r\n * Website: www.sandeepv.in\r\n */\r\n\r\n/**\r\n * Blocktron Module\r\n * @module Blocktron\r\n */\r\n\r\n/**\r\n * ECMAScript 5's strict mode is a way to opt in to a restricted variant of JavaScript,\r\n * thereby implicitly opting-out of \"sloppy mode\". Strict mode isn't just a subset:\r\n * it intentionally has different semantics from normal code. Browsers not supporting\r\n * strict mode will run strict mode code with different behavior from browsers that do,\r\n * so don't rely on strict mode without feature-testing for support for the relevant\r\n * aspects of strict mode. Strict mode code and non-strict mode code can coexist,\r\n * so scripts can opt into strict mode incrementally.\r\n * Strict mode makes several changes to normal JavaScript semantics:\r\n *  1. Eliminates some JavaScript silent errors by changing them to throw errors.\r\n *  2. Fixes mistakes that make it difficult for JavaScript engines to perform optimizations:\r\n *     strict mode code can sometimes be made to run faster than identical code that's not strict mode.\r\n *  3. Prohibits some syntax likely to be defined in future versions of ECMAScript.\r\n */\r\n\"use strict\";\r\n\r\n/**\r\n * The main Blocktron Class.\r\n * @class Blocktron\r\n */\r\nclass Blocktron {\r\n    /**\r\n     * The Blocktron Class properties constructor\r\n     */\r\n    constructor() {\r\n        this.chain = [];\r\n        this.newTransactions = [];\r\n    }\r\n\r\n    /**\r\n     * Blocktron methods\r\n     */\r\n\r\n    /**\r\n     * @function createNewBlock\r\n     * Blocktron method to create a new block on to the blockchain\r\n     * @param {String} nonce - The nonce obtained from proof-of-work\r\n     * @param {String} previousHash - The hash of the previous block\r\n     * @param {String} hash - The hash generated from this block's data\r\n     */\r\n    createNewBlock(nonce, previousHash, hash) {\r\n        \r\n        /**\r\n         * Validate the parameters\r\n         */\r\n        nonce = nonce ? nonce : (function () {\r\n            new Error(\"Nonce required\");\r\n        })();\r\n        previousHash ? previousHash : (function () {\r\n            new Error(\"Previous hash required\");\r\n        })();\r\n        hash = hash ? hash : (function () {\r\n            new Error(\"Hash required\");\r\n        })();\r\n\r\n        /**\r\n         * An atomic block in the chain\r\n         * @type {Object}\r\n         * @const\r\n         * @property {Number} index - The chronological position of this block in the chain\r\n         * @property {String} timeStamp - The time of creation of the block\r\n         * @property {String} transactions - The value in transaction to be recorded\r\n         * @property {String} nonce - The nonce obtained from proof-of-work\r\n         * @property {String} hash - The hash generated from this block's data\r\n         * @property {String} previousHash - The hash of the previous block\r\n         */\r\n        const newBlock = {\r\n            index: this.chain.length + 1,\r\n            timeStamp: Date.now(),\r\n            transactions: this.newTransactions,\r\n            nonce: nonce,\r\n            hash: hash,\r\n            previousHash: previousHash\r\n        };\r\n\r\n        /**\r\n         * Reset the newTransactions array back to empty after creating the new block,\r\n         * so that the createNewBlock method can start over again from zero.\r\n         */\r\n        this.newTransactions = [];\r\n\r\n        /**\r\n         * Then push the new block to the chain\r\n         */\r\n        this.chain.push(newBlock);\r\n\r\n        return newBlock;\r\n    }\r\n}\r\n\r\nmodule.exports = Blocktron;"],"sourceRoot":""}